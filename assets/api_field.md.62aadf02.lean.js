import{_ as t,K as e,X as a,N as s}from"./chunks/framework.effe93a0.js";const D=JSON.parse('{"title":"Field","description":"","frontmatter":{},"headers":[],"relativePath":"api/field.md","filePath":"api/field.md"}'),o={name:"api/field.md"},n=s(`<h1 id="field" tabindex="-1">Field <a class="header-anchor" href="#field" aria-label="Permalink to &quot;Field&quot;">​</a></h1><p>Field that gets returned from the register field function from the form object. Ideally you build a custom input field which handles all the bindings of the field, so you can just v-bind the entire object.</p><h2 id="usage-default" tabindex="-1">Usage Default <a class="header-anchor" href="#usage-default" aria-label="Permalink to &quot;Usage Default&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> field </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> form</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">CustomInput</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">CustomInput</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">form.register(&#39;email&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="field-object" tabindex="-1">Field object <a class="header-anchor" href="#field-object" aria-label="Permalink to &quot;Field object&quot;">​</a></h3><table><thead><tr><th>State</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>errors</td><td><code>Object</code></td><td>Current errors on the field</td></tr><tr><td>isChanged</td><td><code>Boolean</code></td><td>Boolean indicating if the value of the field in changed.</td></tr><tr><td>isDirty</td><td><code>Boolean</code></td><td>Boolean indicating if the field is currently dirty</td></tr><tr><td>isTouched</td><td><code>Boolean</code></td><td>Boolean indicating if the field is touched</td></tr><tr><td>isValid</td><td><code>Boolean</code></td><td>Boolean indicating if the field is currently valid</td></tr><tr><td>modelValue</td><td><code>T</code></td><td>The value of the field, used to bind v-model</td></tr><tr><td>onBlur</td><td><code>Function</code></td><td>Handles the onBlur event, used to bind the event</td></tr><tr><td>onChange</td><td><code>Function</code></td><td>Handles the onChange event, used to bind the event</td></tr><tr><td>onUpdate:modelValue</td><td><code>Function</code></td><td>Handles the updating of modelValue event, used to bind v-model</td></tr><tr><td>setValue</td><td><code>Function</code></td><td>Sets modelValue</td></tr></tbody></table><h2 id="example-input" tabindex="-1">Example input <a class="header-anchor" href="#example-input" aria-label="Permalink to &quot;Example input&quot;">​</a></h2><p>Visit the <a href="./../guide/best-practices/custom-input.html">best practice page</a> to view an example of a custom input consuming the field API.</p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/wouterlms/forms/blob/main/src/composables/useForm.ts" target="_blank" rel="noreferrer">Source</a> - <a href="https://github.com/wouterlms/forms/blob/main/src/types/form.type.ts" target="_blank" rel="noreferrer">Types</a></p>`,11),l=[n];function d(r,p,i,c,u,h){return e(),a("div",null,l)}const f=t(o,[["render",d]]);export{D as __pageData,f as default};
